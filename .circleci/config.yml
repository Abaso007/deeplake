version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  codecov: codecov/codecov@1.1.3
  win: circleci/windows@2.4.0

workflows:
  test:
    jobs:
      - test:
          name: "test1"
          e: linux
          context:
            - test
            - azure
      - test:
          name: "test2"
          e: linux
          optional: true
          context:
            - test
            - azure
      - test:
          name: "test3"
          e: win64
          optional: true
          unix-like: false
          context:
            - test
            - azure
      - test:
          name: "test4"
          e: mac
          optional: true
          context:
            - test
            - azure
  test-and-deploy:
    jobs:
      - test:
          name: test-simple
          e: linux
          context:
            - test
            - azure
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - test:
          name: test-complex
          e: linux
          optional: true
          context:
            - test
            - azure
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - verify:
          type: approval
          requires:
            - test-simple
            - test-complex
      - deploy:
          context:
            - pypi
            - snark-docker
          requires:
            - verify
  conda-deploy:
    jobs:
      - conda


executors:
  linux:
    docker:
      - image: circleci/python:3.8
  win64: win/default
  mac:
    macos:
      xcode: "12.4.0"

commands:
  info:
    steps:
      - run:
          name: "Gather machine info"
          command: python -c "import platform as p; print('{}\nPython {}'.format(p.platform(), p.sys.version))"
  google-creds:
    parameters:
      unix-like:
        type: boolean
        default: true
    steps:
      - unless:
          condition: unix-like
          steps:
            - run:
                name: "Prepare Google credentials - Windows"
                command: |
                  $Env:CI_SECRETS_PATH = $Env:USERPROFILE + "\.secrets"
                  $Env:CI_GCS_PATH = $Env:CI_SECRETS_PATH + "\gcs.json"
                  setx /m CI_GCS_PATH "$Env:CI_GCS_PATH"
                  mkdir $Env:CI_SECRETS_PATH
                  [Text.Encoding]::ASCII.GetString([Convert]::FromBase64String($Env:GOOGLE_APPLICATION_CREDENTIALS)) | Out-File -FilePath $Env:CI_GCS_PATH -Encoding ASCII
      - when:
          condition: unix-like
          steps:
            - run:
                name: "Prepare Google credentials - Unix"
                command: |
                  mkdir -p "/home/circleci/.secrets/"
                  echo "$GOOGLE_APPLICATION_CREDENTIALS" | base64 --decode > "/home/circleci/.secrets/gcs.json"
  requirements:
    parameters:
      optional:
        description: "Include optional requirements"
        type: boolean
        default: false
    steps:
      - run:
          name: "Collecting requirements"
          command: |
            pip install --upgrade pip --user
            pip install --upgrade setuptools
            pip install -r requirements-dev.txt
            <<# parameters.optional >> pip install -r requirements-optional.txt <</ parameters.optional >>
            pip install -r requirements.txt
            pip install -e .
  style-check:
    steps:
      - run:
          name: "Checking code style"
          command: |
            pip install flake8
            flake8 . --count --exit-zero --max-complexity=10 --statistics
  run-tests:
    parameters:
      unix-like:
        type: boolean
        default: true
    steps:
      - unless:
          condition: unix-like
          steps:
            - run:
                name: "Running tests - Windows"
                command: |
                  $Env:GOOGLE_APPLICATION_CREDENTIALS = $Env:CI_GCS_PATH
                  setx /m GOOGLE_APPLICATION_CREDENTIALS "$Env:GOOGLE_APPLICATION_CREDENTIALS"
                  pip install pytest
                  pip install pytest-cov
                  pytest --cov-report=xml --cov=./
      - when:
          condition: unix-like
          steps:
            - run:
                name: "Running tests - Unix"
                command: |
                  export GOOGLE_APPLICATION_CREDENTIALS=/home/circleci/.secrets/gcs.json
                  pytest --cov-report=xml --cov=./
  report:
    steps:
      - codecov/upload:
          file: coverage.xml
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
  slack-status:
    steps:
      - slack/status:
          fail_only: true
          webhook: $SLACK_WEBHOOK

jobs:
  test:
    parameters:
      e:
        type: executor
      optional:
        description: "Include optional requirements and reports"
        type: boolean
        default: false
      unix-like:
        type: boolean
        default: true
    executor: << parameters.e >>
    steps:
      - checkout
      - info
      - google-creds:
          unix-like: << parameters.unix-like >>
      - requirements:
          optional: << parameters.optional >>
      - style-check
      - run-tests:
          unix-like: << parameters.unix-like >>
      - when:
          condition: << parameters.optional >>
          steps:
            - report
      - slack-status
  deploy:
    executor: linux
    environment:
      IMAGE_NAME: snarkai/hub
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: "Init .pypirc"
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = __token__" >> ~/.pypirc
            echo -e "password = $TWINE_PASSWORD" >> ~/.pypirc
      - run:
          name: "Create a source distribution & wheel"
          command: |
            python setup.py sdist
            python setup.py bdist_wheel
      - run:
          name: "Install twine via pip"
          command: |
            pip install twine
      - run:
          name: "Upload dist to PyPi"
          command: |
            twine upload --skip-existing dist/*
      - run:
          name: "Build Docker Hub Image"
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: "Deploy to Docker Hub"
          command: |
            echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG
      - slack-status
  conda:
    executor: linux
    steps:
      - checkout
